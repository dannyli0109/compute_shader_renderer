#version 460

layout (local_size_x = 8, local_size_y = 8) in;
layout(rgba32f, binding = 0) uniform image2D framebuffer;

struct Vertex
{
	highp vec4 position;
	vec4 color;
	vec2 uv; float padding2[2];
	vec3 normal; float padding3;
	vec3 vertTangent; float padding4;
	vec3 vertBitangent; float padding5;
};

struct Light
{
	vec3 position;
	vec3 intensity;
};

struct Index
{
	int data; float padding[3];
};


struct VertexShaderPayload
{
	vec3 modelPos;
	vec3 vertexNormal;
	vec4 position;
	vec2 uv;
	mat3 tbn;
};

struct Depth
{
	double data; float padding[2];
};

layout(std430, binding=1) buffer dep {
    Depth depths[];
};

layout(std430, binding=2) buffer ver {
    Vertex vertices[];
};

layout(std430, binding=3) buffer ind
{
	Index indices[];
};


uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform ivec2 size;
uniform int dimension;
uniform Light lights[16];
uniform int lightCount;
uniform vec3 eyePosition;

uniform sampler2D diffuseTexture;
uniform sampler2D normalTexture;
uniform sampler2D specularTexture;

void SetPixel(int x, int y, vec4 color)
{
	ivec2 pixel_coords = {x, y};
	imageStore(framebuffer, pixel_coords, color);
}

int GetCoordinate(int x, int y)
{
	return size.x * y + x;
}

void DrawLine(vec3 p1, vec3 p2, vec4 color)
{
	bool steep = false;
	float x0 = p1.x;
	float x1 = p2.x;
	float y0 = p1.y;
	float y1 = p2.y;
	if (abs(x0 - x1) < abs(y0 - y1))
	{
		float temp = x0;
		x0 = y0;
		y0 = temp;
		
		temp = x1;
		x1 = y1;
		y1 = temp;

		steep = true;
	}

	if (x0 > x1)
	{
		float temp = x0;
		x0 = x1;
		x1 = temp;

		temp = y0;
		y0 = y1;
		y1 = temp;
	}

	int dx = int(x1 - x0);
	int dy = int(y1 - y0);
	int derror2 = abs(dy) * 2;
	int error2 = 0;
	int y = int(y0);
	for (int x = int(x0); x <= int(x1); x++)
	{
		if (steep)
		{
			SetPixel(y, x, color);
		}
		else
		{
			SetPixel(x, y, color);
		}
		error2 += derror2;
		if (error2 > dx)
		{
			y += (y1 > y0 ? 1 : -1);
			error2 -= dx * 2;
		}
	}
}

vec4 GetProjectedPosition(mat4 mvp, vec4 pos, float f1, float f2)
{
	vec4 p = mvp * pos;
	p /= p.w;
	p.x = 0.5 * size.x * (p.x + 1.0);;
	p.y = 0.5 * size.y * (p.y + 1.0);;
	p.z = p.z * f1 + f2;
	return p;
}

bool PointInTriangle(vec3 p, vec3 v[3])
{
	bool allPositive = true;
	bool allNegative = true;
	for (int i = 0; i < 3; i++)
	{
		vec3 v1 = v[(i + 1) % 3] - v[i];
		vec3 v2 = p - v[i];

		vec3 cross = { v1.y * v2.z - v2.y * v1.z, v1.z * v2.x - v2.z * v1.x, v1.x * v2.y - v2.x * v1.y };

		if (cross.z < 0) allPositive = false;
		if (cross.z > 0) allNegative = false;
	}
	if (allPositive || allNegative) return true;
	return false;
}

vec3 ComputeBarycentric2D(vec3 position, vec3 v[3])
{
	float x = position.x;
	float y = position.y;
	float c1 = (x * (v[1].y - v[2].y) + (v[2].x - v[1].x) * y + v[1].x * v[2].y - v[2].x * v[1].y) / (v[0].x * (v[1].y - v[2].y) + (v[2].x - v[1].x) * v[0].y + v[1].x * v[2].y - v[2].x * v[1].y);
	float c2 = (x * (v[2].y - v[0].y) + (v[0].x - v[2].x) * y + v[2].x * v[0].y - v[0].x * v[2].y) / (v[1].x * (v[2].y - v[0].y) + (v[0].x - v[2].x) * v[1].y + v[2].x * v[0].y - v[0].x * v[2].y);
	float c3 = (x * (v[0].y - v[1].y) + (v[1].x - v[0].x) * y + v[0].x * v[1].y - v[1].x * v[0].y) / (v[2].x * (v[0].y - v[1].y) + (v[1].x - v[0].x) * v[2].y + v[0].x * v[1].y - v[1].x * v[0].y);
	return vec3(c1,c2,c3);
}

vec3 Interpolate(float alpha, float beta, float gamma, vec3 v1, vec3 v2, vec3 v3, float w1, float w2, float w3)
{
	return (alpha * v1 / w1 + beta * v2 / w2 + gamma * v3 / w3);
}

vec2 Interpolate(float alpha, float beta, float gamma, vec2 v1, vec2 v2, vec2 v3, float w1, float w2, float w3)
{
	return (alpha * v1 / w1 + beta * v2 / w2 + gamma * v3 / w3);
}

mat3 Interpolate(float alpha, float beta, float gamma, mat3 v1, mat3 v2, mat3 v3, float w1, float w2, float w3)
{
	return (alpha * v1 / w1 + beta * v2 / w2 + gamma * v3 / w3);
}

VertexShaderPayload VertexShader(Vertex v, mat4 mvp, mat4 invTransform, float f1, float f2)
{
	VertexShaderPayload payload;
	vec4 position = mvp * v.position;
	position = position / position.w;
	position.x = 0.5 * size.x * (position.x + 1.0);
	position.y = 0.5 * size.y * (position.y + 1.0);
	position.z = position.z * f1 + f2;

	payload.position = position;
	payload.vertexNormal = (invTransform * vec4(v.normal, 0)).xyz;
	payload.modelPos = (model * v.position).xyz;
	payload.uv = v.uv;

	vec3 t = normalize(model * vec4(v.vertTangent, 0.0f)).xyz;
	vec3 b = normalize(model * vec4(v.vertBitangent, 0.0f)).xyz;
	vec3 n = normalize(model * vec4(v.normal, 0.0f)).xyz;
	payload.tbn = mat3(t, b, n);

	return payload;
}

void Resterise(in VertexShaderPayload v[3])
{
	float minX = 1e9, minY = 1e9, maxX = -1e9, maxY = -1e9;
	vec3 positions[3] = { v[0].position.xyz, v[1].position.xyz, v[2].position.xyz};
	for (int i = 0; i < positions.length(); i++)
	{
		vec3 pos = positions[i];
		if (minX > pos.x) minX = pos.x;
		if (minY > pos.y) minY = pos.y;
		if (maxX < pos.x) maxX = pos.x;
		if (maxY < pos.y) maxY = pos.y;
	}

	// iterate the bounding box of the three points
	for (int y = int(minY); y <= int(maxY); y++)
	{
		for (int x = int(minX); x <= int(maxX); x++)
		{
			if (x < 0 || y < 0) continue;
			if (x >= size.x || y >= size.y) continue;
			vec3 p = { x + 0.5, y + 0.5, 1.0 };

			if (PointInTriangle(p, positions))
			{
				vec3 baryCentric = ComputeBarycentric2D(p, positions);
				float alpha = baryCentric.x;
				float beta = baryCentric.y;
				float gamma = baryCentric.z;


				float w1 = v[0].position.w;
				float w2 = v[1].position.w;
				float w3 = v[2].position.w;

				// use double to improve depth precision
				double z1 = v[0].position.z;
				double z2 = v[1].position.z;
				double z3 = v[2].position.z;
				double wReciprocal = 1.0 / (alpha / w1 + beta / w2 + gamma / w3);
				double zInterpolated = 
					alpha * z1 / w1 +
					beta * z2 / w2 +
					gamma * z3 / w3;
				zInterpolated *= wReciprocal;

				int index = GetCoordinate(x, y);

				double depth = depths[size.x * y + x].data;

				if (zInterpolated < depth)
				{
					depth = zInterpolated;
					depths[size.x * y + x].data = depth;

					vec3 n1 = v[0].vertexNormal;
					vec3 n2 = v[1].vertexNormal;
					vec3 n3 = v[2].vertexNormal;
					vec3 vertexNormal = Interpolate(alpha, beta, gamma, n1, n2, n3, w1, w2, w3);
					vertexNormal = normalize(vertexNormal);

					vec3 mp1 = v[0].modelPos;
					vec3 mp2 = v[1].modelPos;
					vec3 mp3 = v[2].modelPos;
					vec3 modelPos = Interpolate(alpha, beta, gamma, mp1, mp2, mp3, w1, w2, w3);

					vec2 uv1 = v[0].uv;
					vec2 uv2 = v[1].uv;
					vec2 uv3 = v[2].uv;
					vec2 uv = Interpolate(alpha, beta, gamma, uv1, uv2, uv3, w1, w2, w3);

					mat3 tbn1 = v[0].tbn;
					mat3 tbn2 = v[1].tbn;
					mat3 tbn3 = v[2].tbn;
					mat3 tbn = Interpolate(alpha, beta, gamma, tbn1, tbn2, tbn3, w1, w2, w3);

					vec3 normalTap = texture(normalTexture, uv).xyz;
					vec3 mapNormal = { normalTap.x * 2.0f - 1.0f, normalTap.y * 2.0f - 1.0f, normalTap.z * 2.0f - 1.0f };
					vec3 normal = normalize(vec4(tbn * mapNormal, 0)).xyz;

					vec3 ld = vec3(0, 0, 0);
					vec3 ls = vec3(0, 0, 0);

					vec3 ka = vec3(0.005, 0.005, 0.005);
					vec3 ai = vec3(10, 10, 10);
					vec3 la = ka * ai;
					vec3 kd = texture(diffuseTexture, uv).xyz;
					for (int i = 0; i < lightCount; i++)
					{
						// diffuse
						vec3 lightPos = lights[i].position;
						vec3 toLight = normalize(lightPos - modelPos);
						float d2 = dot(lightPos - modelPos, lightPos - modelPos);
						float cosTheta = dot(normal, toLight);
						ld += kd * (lights[i].intensity / d2) * max(0, cosTheta);

						// specular
						vec3 ks = texture(specularTexture, uv).xyz;
						vec3 toEye = normalize(eyePosition - modelPos);
						vec3 h = normalize(toEye + toLight);
						float spec = dot(normal, h);
						ls += ks * (lights[i].intensity / d2) * pow(max(0, spec), 150);
					}

					vec3 l = ld + la + ls;

					SetPixel(x, y, vec4(l, 1));
				}
			}
		}
	}
}


void main()
{
	uvec3 id = gl_GlobalInvocationID;
	int index = int(id.y * dimension * 8 + id.x) * 3;


	int i0 = indices[index].data;
	int i1 = indices[index + 1].data;
	int i2 = indices[index + 2].data;

	Vertex v[3] = {vertices[i0], vertices[i1], vertices[i2]};
	
	float f1 = (50 - 0.1) / 2.0;
	float f2 = (50 + 0.1) / 2.0;
	mat4 mvp = projection * view * model;
	mat4 invTransform = transpose(inverse(view * model));

	VertexShaderPayload payloads[3];
	for (int i = 0; i < v.length(); i++)
	{
		payloads[i] = VertexShader(v[i], mvp, invTransform, f1, f2);
	}
	Resterise(payloads);
}